#!/usr/bin/env perl

BEGIN {
    push @INC, "../site_perl/";
}

use strict;
use warnings;

use Getopt::Long;
use Linux::Cpuinfo;
use File::Temp qw(tempfile);
use Parallel::ForkManager;
use IO::Socket::INET;
use JSON;
use Path::Tiny;
use List::Util qw(sum);

use Blenderwulf::Renderer;

my $mode = shift;
die help() unless $mode;

my $input_file;
my $help;
my $threads;
my $listen_port;

GetOptions("file|f=s" => \$input_file,
	   "help|h" => \$help,
           "listen_port|p=s" => \$listen_port,
           "threads|t=s" => \$threads) or die help();

die help() if $help;


sub help {
    return <<"EOT";
Usage: $0 <mode>
Modes:
     server [-t thread_count] [-p listen_port]
     client <input_file> <server:port> [server:port...]
EOT
}

$| = 1;

if($mode eq 'server') {
    $listen_port //= 3621;
    unless($threads) {
        my $cpuinfo = Linux::Cpuinfo->new;
        $threads = $cpuinfo->num_cpus();
    }
    my $socket = IO::Socket::INET->new(
        LocalPort => $listen_port,
        Proto     => 'tcp',
        Listen    => 5,
        ReuseAddr => 1,
        ReusePort => 1) or die "Couldn't open socket on port $listen_port: $!";
    while(1) {
        my $client_socket = $socket->accept();
        print "Got connection\n";
        my $command = from_json(<$client_socket>);
        if($command->{cmd} eq 'render') {
            my (undef, $input_fn) = tempfile(UNLINK => 1);
            my (undef, $output_fn) = tempfile(UNLINK => 1);
            path($input_fn)->spew($command->{file});
            
            Blenderwulf::Renderer::render_from_area($input_fn, $output_fn, $command->{x}, $command->{y}, $command->{w}, $command->{h}, $threads, sub {
                my $message = {
                    type => 'return_text',
                    text => $_
                };
                print $client_socket to_json($message) . "\n";
                                                    });
            my $img = path($output_fn)->slurp();
            my $message = {
                type => 'done',
                image => $img
            };
            print $client_socket to_json($message) . "\n";
        }
        close $client_socket;
        print "Connection closed\n";
    }
} elsif($mode eq 'client') {
    my $input_file = shift;
    my @servers = @ARGV;

    print "Have " . scalar(@servers) . " server(s)\n";
    print "Preparing file...";
    my (undef, $input_tempf) = tempfile(UNLINK => 1);
    Blenderwulf::Renderer::pack_libraries($input_file, $input_tempf);
    
    my ($xres, $yres) = Blenderwulf::Renderer::get_render_size_from_file($input_tempf);
    print "File resolution: $xres x $yres\n";

    my @output_files = map { (tempfile(UNLINK => 0))[1] . ".png" } @servers;
    my $nservers = scalar @servers;

    my $num_strips = $xres / 32;
    $num_strips++ if $xres % 32;
    $num_strips = int $num_strips;
    print "Dividing up $num_strips strips.\n";
    my @cols_per_server = ($xres / $nservers) x $nservers;
    print "[" . join(', ', @cols_per_server) . "]\n";
    my $current_server_index = -1;
    my $pm = Parallel::ForkManager->new($nservers + 1);
    print "\n" x ($nservers + 1);
    my $file = path($input_tempf)->slurp();
    foreach my $server (@servers) {
        $current_server_index++;
        $pm->start and next;
        $server .= ":3621" if $server !~ /:/;
        my $socket = IO::Socket::INET->new(
            PeerAddr => $server,
            Proto => 'tcp',
            Timeout => 1
            );
        my $x0 = sum @cols_per_server[0..$current_server_index-1] // 0;
        my $message = {
            cmd => 'render',
            x => $x0,
            y => 0,
            w => $cols_per_server[$current_server_index],
            h => $yres,
            file => $file
        };
        print_client_message_indexed($current_server_index, $nservers, "<$server> Sending...");
        print $socket to_json($message) . "\n";

        my $in_msg;
        while(<$socket>) {
            $in_msg = from_json($_);
            last if $in_msg->{type} eq 'done';
            chomp $in_msg->{text};
            print_client_message_indexed($current_server_index, $nservers, "<$server> $in_msg->{text}");
        }
        path($output_files[$current_server_index])->spew($in_msg->{image});

        $pm->finish;
    }
    $pm->wait_all_children;
    my $cmd = "convert " . (join " ", @output_files) . " +append - | display";
    print "$cmd\n";
    system($cmd);

    map { unlink $_ } @output_files;
}

sub print_client_message_indexed {
    my ($idx, $nservers, $text) = @_;
    my $offt = $nservers - $idx;
    my $ostr = "\e[s\e[${offt}A$text\e[K\e[u";
    syswrite(STDOUT, $ostr);
    
}
